import "dart:convert";
import "package:hive_flutter/hive_flutter.dart";
import "package:flutter/material.dart";
import "user_config_model.dart";

class ConfigService {
static const String boxName = "user_config_box";
static const String key = "user_config";

static Future<void> init() async {
if (!Hive.isAdapterRegistered(10)) {
Hive.registerAdapter(EmotionConfigAdapter());
}
if (!Hive.isAdapterRegistered(11)) {
Hive.registerAdapter(UserConfigAdapter());
}
await Hive.openBox<UserConfig>(boxName);
}

static UserConfig get defaultConfig {
  return UserConfig(
    scaleMin: 0,
    scaleMax: 10,
    emotions: [
      EmotionConfig(id: "joy", name: "–†–∞–¥–æ—Å—Ç—å", emoji: "üòä", color: 0xFFFFC107),
      EmotionConfig(id: "sadness", name: "–ì—Ä—É—Å—Ç—å", emoji: "üò¢", color: 0xFF2196F3),
      EmotionConfig(id: "anger", name: "–ó–ª–æ—Å—Ç—å", emoji: "üò†", color: 0xFFF44336),
      EmotionConfig(id: "anxiety", name: "–¢—Ä–µ–≤–æ–≥–∞", emoji: "üò∞", color: 0xFF7E57C2),
      EmotionConfig(id: "calm", name: "–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", emoji: "üòå", color: 0xFF26A69A),
      EmotionConfig(id: "excitement", name: "–í–æ–æ–¥—É—à–µ–≤–ª–µ–Ω–∏–µ", emoji: "ü§©", color: 0xFFFF7043),
      EmotionConfig(id: "irritation", name: "–†–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ", emoji: "üò§", color: 0xFF8D6E63),
      EmotionConfig(id: "confusion", name: "–†–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç—å", emoji: "üòï", color: 0xFF9E9D24),
      EmotionConfig(id: "boredom", name: "–°–∫—É–∫–∞", emoji: "ü•±", color: 0xFF78909C),
      EmotionConfig(id: "pride", name: "–ì–æ—Ä–¥–æ—Å—Ç—å", emoji: "üòå", color: 0xFFAB47BC),
    ],
  );
}

static Box<UserConfig> get _box => Hive.box<UserConfig>(boxName);

static Future<UserConfig> loadOrCreate() async {
final existing = _box.get(key);
if (existing != null) return existing;
final def = defaultConfig;
await _box.put(key, def);
return def;
}

static Future<void> save(UserConfig cfg) async {
  var fixed = cfg;
  if (cfg.scaleMin >= cfg.scaleMax) {
    fixed = cfg.copyWith(scaleMin: 0, scaleMax: 10);
  }
  await _box.put(key, fixed);
}


// –≠–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç JSON
static String exportJson(UserConfig cfg) => jsonEncode(cfg.toJson());

static Future<UserConfig> importJson(String jsonStr) async {
final map = jsonDecode(jsonStr) as Map<String, dynamic>;
final cfg = UserConfig.fromJson(map);
await save(cfg);
return cfg;
}
}
